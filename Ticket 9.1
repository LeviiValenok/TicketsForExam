//Нужна только функция


#include <stdio.h>
#include <malloc.h>
void SortByInsert(int** matrix, int index, int m);
int main()
{
	int n, m, index;
	int** matrix;

	printf("Enter size of matrix\n");
	printf("Enter number of strings: \n");
	scanf_s("%d", &n);
	printf("Enter number of columns: \n");
	scanf_s("%d", &m);

	printf("Enter a matrix\n");
	matrix = (int**)calloc(n, sizeof(int*));
	{
		for (int i = 0; i < n; i++)
		{
			matrix[i] = (int*)calloc(m, sizeof(int));
				for (int j = 0; j < m; j++)
				{
					printf("[%d][%d] ", i, j);
					scanf_s("%d", &matrix[i][j]);
					//printf("\n");
				}
		}
	}

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf("%5d", matrix[i][j]);
		}
		printf("\n");
	}

	printf("Enter a string that you want to sort: \n");
	scanf_s("%d", &index);
	SortByInsert(matrix, index - 1, m);

	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < m; j++)
		{
			printf("%5d", matrix[i][j]);
		}
		printf("\n");
	}

	for (int i = 0; i < n; i++)
	{
		free(matrix[i]);
	}

	free(matrix);

	return 0;
}

void SortByInsert(int** matrix, int index, int m)
{
	int temp = 0, location = 0;
	for (int j = 1; j < m; j++)
	{
		temp = matrix[index][j];
		location = j - 1;
		while (location >= 0 && matrix[index][location] > temp)
		{
			matrix[index][location + 1] = matrix[index][location];
			location--;
		}
		matrix[index][location + 1] = temp;
	}
}
